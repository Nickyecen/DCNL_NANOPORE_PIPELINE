// MAIN CONFIGURATION FILE
// see src/configs for other parameters

params {
    // Project name (used to identify which project you're working on)
    project_name = "default"
    // Input reference fasta file
    reference_file = "None" 
    // Step of pipeline to execute
    step = "None"
    // Output directory for pipeline results
    out_dir = "results_${params.project_name}/" 
    // directory of basecalling data
    basecall_path = "./data" 
    // MAPQ filtering threshold for bam files, 0 for no filtering
    mapq = "10" 
    // Quality score threshold
    qscore_thresh = "9"
    // Desired basecall speed ("fast", "hac", "sup"; @latest <- latest version available)
    basecall_speed = "sup@latest"
    // Desired basecaller modifications (4mC_5mC, 5mCG_5hmCG, 5mC_5hmC, 6mA). Can't use more than one modification per nucleotide.
    basecall_mods = "5mC_5hmC"
    // Kit name (kit used to barcode the samples (e.g. SQK-RBK114-24); Use "None" to skip --kit-name in basecalling)
    barcoding_kit = "SQK-RBK114-24"
    // Threshold for mapped reasds
    min_mapped_reads_thresh = 500
    // Desired basecall model version as a path (e.g. ./models/dna_r10.4.1_e8.2_400bps_sup@v5.2.0)
    basecall_config = "None"
    // Type of read trimming during basecalling ("all", "primers", "adapters", "none"); You should change to "none" if you don't want to trim in the basecalling
    basecall_trim = "all"
    // Basecalling demultiplexing
    basecall_demux = false
    // Barcodes were trimmed? (if True = demux will only separate the files; if False = demux will trim after basecalling and separate them)
    trimmed_barcodes = "True"
    // Add prefix to all output files
    prefix = "None"
    // Which GPU devices to use for basecalling?
    gpu_devices = "all"
    // Previous results
    steps_2_and_3_input_directory = "None"
    // MultiQC config
    multiqc_config = "./references/multiqc_config.yaml"
    // Are the files from MinKNOW barcoded or not 
    is_barcoded = true
}

// queue_size depends on the step
includeConfig ({
    if (params.step == 1) { return './configs/queue-basecalling.config' }
    else { return './configs/queue-default.config' }
}())

process { 
    // Define local cpu execution
    withLabel: cpu {
        executor='local'
    }
    // Define local gpu execution
    withLabel: gpu {
        executor='local'
        // --nv deafult flag to run CUDA applications (can be set on by deafult in /etc/apptainer/apptainer.conf)
        // --nvccli uses the nvidia-container-cli (see 'https://apptainer.org/docs/user/main/gpu.html#nvidia-gpus-cuda-nvidia-container-cli')
        containerOptions = '--nv --nvccli'
    }
    // Define the container for every process
    container = "./images/debian-nanopore.sif"
}

executor {
	name = 'local'
	queueSize = params.queue_size
}

apptainer {
	enabled = true
	pullTimeout = '60m'
}

profiles {
    // Human Blood
    human_blood_basecall {
        params {
            project_name = "human_blood"
            step = 1
            basecall_path = "./data/pod5"
            reference_file = "./references/Homo_sapiens.GRCh38.dna.primary_assembly.fa"
            out_dir = "results_human_blood/"
        }
    }
    human_blood_qc {
        params {
            project_name = "results_human_blood"
            step = "2_from_step_1"
            steps_2_and_3_input_directory = "./results/results_human_blood/"
            out_dir = "results_human_blood/"
        }
    }
    human_blood_modkit {
        params {
            project_name = "results_human_blood"
            step = 3
            steps_2_and_3_input_directory = "./results/results_human_blood/"
            out_dir = "results_human_blood/"
        }
    }
}